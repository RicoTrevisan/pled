name: Build and Release

on:
    push:
        tags:
            - "v*"

permissions:
    contents: write

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    build:
        name: Build (${{ matrix.target }})
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                target: [macos_x86, macos_arm, linux_arm, linux_x86, windows]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Elixir
              id: beam
              uses: erlef/setup-beam@v1
              with:
                  elixir-version: "1.18"
                  otp-version: "27.0"

            - name: Restore dependencies cache
              uses: actions/cache@v4
              with:
                  path: deps
                  key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
                  restore-keys: ${{ runner.os }}-mix-

            - name: Cache _build
              uses: actions/cache@v4
              with:
                  path: _build
                  key: ${{ runner.os }}-build-${{ hashFiles('**/mix.lock') }}-${{ steps.beam.outputs.otp-version || '27.0' }}-${{ steps.beam.outputs.elixir-version || '1.18' }}
                  restore-keys: |
                      ${{ runner.os }}-build-

            - name: Install Zig
              uses: mlugg/setup-zig@v2
              with:
                  version: 0.14.0

            - name: Install system dependencies
              run: |
                  sudo apt-get update
                  sudo apt-get install -y xz-utils

            - name: Install dependencies
              run: mix deps.get

            - name: Fetch tags
              run: |
                  git fetch --tags --force --prune --depth=1

            - name: Check formatting
              if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
              run: mix format --check-formatted

            - name: Run tests
              if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
              run: mix test

            - name: Build release binaries (all)
              env:
                  MIX_ENV: prod
              run: |
                  mix release
                  ls -la burrito_out || true

            - name: Extract version
              id: version
              run: |
                  if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
                    VERSION=${GITHUB_REF#refs/tags/v}
                    echo "Using version from tag: $VERSION"
                  else
                    VERSION=$(grep 'version:' mix.exs | sed 's/.*version: "\(.*\)".*/\1/')
                    echo "Using version from mix.exs: $VERSION"
                  fi
                  echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

            - name: Prepare single-target release asset
              run: |
                  mkdir -p release-assets
                  cd burrito_out

                  # Try to find the artifact corresponding to the current matrix target
                  case "${{ matrix.target }}" in
                    macos_x86)
                      file=$(ls | grep -E "macos_x86|darwin_x86" | head -n 1 || true)
                      ;;
                    macos_arm)
                      file=$(ls | grep -E "macos_arm|darwin_arm|macos$" | head -n 1 || true)
                      ;;
                    linux_x86)
                      file=$(ls | grep -E "linux_x86" | head -n 1 || true)
                      ;;
                    linux_arm)
                      file=$(ls | grep -E "linux_arm" | head -n 1 || true)
                      ;;
                    windows)
                      file=$(ls | grep -E "windows" | head -n 1 || true)
                      ;;
                  esac

                  if [ -z "$file" ]; then
                    echo "No artifact found for target ${{ matrix.target }}"
                    ls -la
                    exit 1
                  fi

                  if [[ "$file" == *.exe ]]; then
                    ext=".exe"
                    base_name="${file%.*}"
                  else
                    ext=""
                    base_name="$file"
                  fi

                  case "$base_name" in
                    *macos_x86*|*darwin_x86*)
                      new_name="pled-v${{ steps.version.outputs.VERSION }}-macos-x86_64${ext}"
                      ;;
                    *macos_arm*|*darwin_arm*|*macos)
                      new_name="pled-v${{ steps.version.outputs.VERSION }}-macos-arm64${ext}"
                      ;;
                    *linux_x86*)
                      new_name="pled-v${{ steps.version.outputs.VERSION }}-linux-x86_64${ext}"
                      ;;
                    *linux_arm*)
                      new_name="pled-v${{ steps.version.outputs.VERSION }}-linux-arm64${ext}"
                      ;;
                    *windows*)
                      new_name="pled-v${{ steps.version.outputs.VERSION }}-windows-x86_64${ext}"
                      ;;
                    *)
                      new_name="pled-v${{ steps.version.outputs.VERSION }}-${base_name}${ext}"
                      ;;
                  esac

                  cp "$file" "../release-assets/$new_name"
                  echo "Prepared: $new_name"

            - name: Upload single-target artifact
              uses: actions/upload-artifact@v4
              with:
                  name: pled-${{ matrix.target }}
                  path: release-assets/
                  retention-days: 30

    publish:
        name: Publish Release
        needs: [build]
        if: startsWith(github.ref, 'refs/tags/v')
        runs-on: ubuntu-latest
        steps:
            - name: Download artifacts from all targets
              uses: actions/download-artifact@v4
              with:
                  path: release-assets
                  merge-multiple: true

            - name: Generate checksums
              run: |
                  cd release-assets
                  sha256sum * > checksums.txt
                  echo "Generated checksums:"
                  cat checksums.txt

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ github.ref_name }}
                  name: Release ${{ github.ref_name }}
                  body: |
                      ## Changes
                      Auto-generated release with cross-platform binaries.

                      ## Downloads
                      - macOS (ARM64): `pled-${{ github.ref_name }}-macos-arm64`
                      - macOS (x86_64): `pled-${{ github.ref_name }}-macos-x86_64`
                      - Linux (ARM64): `pled-${{ github.ref_name }}-linux-arm64`
                      - Linux (x86_64): `pled-${{ github.ref_name }}-linux-x86_64`
                      - Windows (x86_64): `pled-${{ github.ref_name }}-windows-x86_64.exe`

                      Verify downloads using `checksums.txt`.
                  files: release-assets/*
                  draft: false
                  prerelease: false
                  token: ${{ secrets.GITHUB_TOKEN }}
